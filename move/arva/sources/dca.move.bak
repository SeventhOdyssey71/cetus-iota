module Blitz::dca {
    use iota::coin::{Self, Coin};
    use iota::balance::{Self, Balance};
    use iota::object::{Self, UID, ID};
    use iota::tx_context::{Self, TxContext};
    use iota::transfer;
    use iota::event;
    use iota::clock::{Self, Clock};
    use Blitz::dex::{Self, Pool};

    const EInvalidInterval: u64 = 1;
    const EInvalidOrderCount: u64 = 2;
    const EStrategyExpired: u64 = 3;
    const EUnauthorized: u64 = 4;
    const EPriceOutOfRange: u64 = 5;

    public struct DCAStrategy<phantom CoinA, phantom CoinB> has key {
        id: UID,
        owner: address,
        pool_id: object::ID,
        source_balance: Balance<CoinA>,
        received_balance: Balance<CoinB>,
        amount_per_order: u64,
        interval_ms: u64,
        total_orders: u64,
        executed_orders: u64,
        last_execution_time: u64,
        min_price: u64,
        max_price: u64,
    }

    public struct DCACreatedEvent has copy, drop {
        strategy_id: object::ID,
        owner: address,
        amount_per_order: u64,
        interval_ms: u64,
        total_orders: u64,
    }

    public struct DCAExecutedEvent has copy, drop {
        strategy_id: object::ID,
        order_number: u64,
        amount_in: u64,
        amount_out: u64,
        execution_price: u64,
    }

    public struct DCACancelledEvent has copy, drop {
        strategy_id: object::ID,
        owner: address,
        executed_orders: u64,
    }

    public entry fun create_dca_strategy<CoinA, CoinB>(
        pool: &Pool<CoinA, CoinB>,
        source_coin: Coin<CoinA>,
        interval_ms: u64,
        total_orders: u64,
        min_price: u64,
        max_price: u64,
        clock: &Clock,
        ctx: &mut TxContext
    ) {
        assert!(interval_ms > 0, EInvalidInterval);
        assert!(total_orders > 0, EInvalidOrderCount);

        let total_amount = coin::value(&source_coin);
        let amount_per_order = total_amount / total_orders;
        
        let strategy = DCAStrategy<CoinA, CoinB> {
            id: object::new(ctx),
            owner: tx_context::sender(ctx),
            pool_id: object::id(pool),
            source_balance: coin::into_balance(source_coin),
            received_balance: balance::zero(),
            amount_per_order,
            interval_ms,
            total_orders,
            executed_orders: 0,
            last_execution_time: clock::timestamp_ms(clock),
            min_price,
            max_price,
        };

        event::emit(DCACreatedEvent {
            strategy_id: object::id(&strategy),
            owner: tx_context::sender(ctx),
            amount_per_order,
            interval_ms,
            total_orders,
        });

        transfer::share_object(strategy);
    }

    public entry fun execute_dca_order<CoinA, CoinB>(
        strategy: &mut DCAStrategy<CoinA, CoinB>,
        pool: &mut Pool<CoinA, CoinB>,
        clock: &Clock,
        ctx: &mut TxContext
    ) {
        let current_time = clock::timestamp_ms(clock);
        let time_since_last = current_time - strategy.last_execution_time;
        
        assert!(time_since_last >= strategy.interval_ms, EInvalidInterval);
        assert!(strategy.executed_orders < strategy.total_orders, EStrategyExpired);

        let (reserve_a, reserve_b) = dex::get_reserves(pool);
        let current_price = (reserve_b * 1000000) / reserve_a;
        
        assert!(
            current_price >= strategy.min_price && current_price <= strategy.max_price,
            EPriceOutOfRange
        );

        let amount_to_swap = if (balance::value(&strategy.source_balance) < strategy.amount_per_order) {
            balance::value(&strategy.source_balance)
        } else {
            strategy.amount_per_order
        };

        let coin_to_swap = coin::from_balance(
            balance::split(&mut strategy.source_balance, amount_to_swap),
            ctx
        );

        let amount_out = dex::get_amount_out(
            amount_to_swap,
            reserve_a,
            reserve_b,
            30
        );

        dex::swap_a_to_b(pool, coin_to_swap, 0, ctx);

        strategy.executed_orders = strategy.executed_orders + 1;
        strategy.last_execution_time = current_time;

        event::emit(DCAExecutedEvent {
            strategy_id: object::id(strategy),
            order_number: strategy.executed_orders,
            amount_in: amount_to_swap,
            amount_out,
            execution_price: current_price,
        });

        if (strategy.executed_orders == strategy.total_orders) {
            finalize_strategy(strategy, ctx);
        }
    }

    public entry fun cancel_dca_strategy<CoinA, CoinB>(
        strategy: DCAStrategy<CoinA, CoinB>,
        ctx: &mut TxContext
    ) {
        assert!(strategy.owner == tx_context::sender(ctx), EUnauthorized);
        
        event::emit(DCACancelledEvent {
            strategy_id: object::id(&strategy),
            owner: strategy.owner,
            executed_orders: strategy.executed_orders,
        });

        finalize_strategy(strategy, ctx);
    }

    fun finalize_strategy<CoinA, CoinB>(
        strategy: DCAStrategy<CoinA, CoinB>,
        ctx: &mut TxContext
    ) {
        let DCAStrategy {
            id,
            owner,
            pool_id: _,
            source_balance,
            received_balance,
            amount_per_order: _,
            interval_ms: _,
            total_orders: _,
            executed_orders: _,
            last_execution_time: _,
            min_price: _,
            max_price: _,
        } = strategy;

        if (balance::value(&source_balance) > 0) {
            transfer::public_transfer(
                coin::from_balance(source_balance, ctx),
                owner
            );
        } else {
            balance::destroy_zero(source_balance);
        };

        if (balance::value(&received_balance) > 0) {
            transfer::public_transfer(
                coin::from_balance(received_balance, ctx),
                owner
            );
        } else {
            balance::destroy_zero(received_balance);
        };

        object::delete(id);
    }

    public fun get_strategy_info<CoinA, CoinB>(
        strategy: &DCAStrategy<CoinA, CoinB>
    ): (u64, u64, u64, u64) {
        (
            strategy.executed_orders,
            strategy.total_orders,
            balance::value(&strategy.source_balance),
            balance::value(&strategy.received_balance)
        )
    }
}