module Blitz::staking_pool {
    use iota::coin::{Self, Coin};
    use iota::balance::{Self, Balance};
    use iota::object::{Self, UID, ID};
    use iota::tx_context::{Self, TxContext};
    use iota::transfer;
    use iota::event;
    use iota::clock::{Self, Clock};
    use iota::iota::IOTA;

    // Error codes
    const EInsufficientAmount: u64 = 1;
    const EInvalidUnstakeAmount: u64 = 2;
    const ECooldownNotMet: u64 = 3;
    const EPoolPaused: u64 = 4;
    const EInvalidExchangeRate: u64 = 5;
    
    // Constants
    const MINIMUM_STAKE_AMOUNT: u64 = 1_000_000_000; // 1 IOTA
    const COOLDOWN_PERIOD_MS: u64 = 259_200_000; // 3 days in milliseconds
    const FEE_PRECISION: u64 = 10_000; // 0.01% precision
    const STAKE_FEE: u64 = 10; // 0.1% staking fee
    const UNSTAKE_FEE: u64 = 10; // 0.1% unstaking fee

    // Structs
    public struct StakingPool has key {
        id: UID,
        total_iota_staked: Balance<IOTA>,
        total_stiota_supply: u64,
        accumulated_rewards: Balance<IOTA>,
        exchange_rate: u64, // stIOTA per IOTA * 1e9
        is_paused: bool,
        fee_recipient: address,
        protocol_fee_balance: Balance<IOTA>,
    }

    public struct StakedIOTA has key, store {
        id: UID,
        amount: u64,
    }

    public struct UnstakeRequest has key, store {
        id: UID,
        owner: address,
        stiota_amount: u64,
        iota_amount: u64,
        unlock_time: u64,
        claimed: bool,
    }

    // Events
    public struct StakeEvent has copy, drop {
        staker: address,
        iota_amount: u64,
        stiota_amount: u64,
        exchange_rate: u64,
        timestamp: u64,
    }

    public struct UnstakeEvent has copy, drop {
        unstaker: address,
        stiota_amount: u64,
        iota_amount: u64,
        exchange_rate: u64,
        unlock_time: u64,
        timestamp: u64,
    }

    public struct ClaimEvent has copy, drop {
        claimer: address,
        iota_amount: u64,
        timestamp: u64,
    }

    public struct RewardsAddedEvent has copy, drop {
        amount: u64,
        new_exchange_rate: u64,
        timestamp: u64,
    }

    // Initialize the staking pool
    fun init(ctx: &mut TxContext) {
        let pool = StakingPool {
            id: object::new(ctx),
            total_iota_staked: balance::zero<IOTA>(),
            total_stiota_supply: 0,
            accumulated_rewards: balance::zero<IOTA>(),
            exchange_rate: 1_000_000_000, // 1:1 initial rate
            is_paused: false,
            fee_recipient: tx_context::sender(ctx),
            protocol_fee_balance: balance::zero<IOTA>(),
        };
        
        transfer::share_object(pool);
    }

    // Stake IOTA to receive stIOTA
    public entry fun stake(
        pool: &mut StakingPool,
        iota_coin: Coin<IOTA>,
        clock: &Clock,
        ctx: &mut TxContext
    ) {
        assert!(!pool.is_paused, EPoolPaused);
        
        let stake_amount = coin::value(&iota_coin);
        assert!(stake_amount >= MINIMUM_STAKE_AMOUNT, EInsufficientAmount);
        
        // Calculate staking fee
        let fee_amount = (stake_amount * STAKE_FEE) / FEE_PRECISION;
        let net_stake_amount = stake_amount - fee_amount;
        
        // Add fee to protocol balance
        let iota_balance = coin::into_balance(iota_coin);
        let fee_balance = balance::split(&mut iota_balance, fee_amount);
        balance::join(&mut pool.protocol_fee_balance, fee_balance);
        
        // Calculate stIOTA to mint based on current exchange rate
        let stiota_amount = calculate_stiota_amount(net_stake_amount, pool.exchange_rate);
        
        // Update pool state
        balance::join(&mut pool.total_iota_staked, iota_balance);
        pool.total_stiota_supply = pool.total_stiota_supply + stiota_amount;
        
        // Create and transfer stIOTA token
        let stiota = StakedIOTA {
            id: object::new(ctx),
            amount: stiota_amount,
        };
        
        transfer::public_transfer(stiota, tx_context::sender(ctx));
        
        // Emit stake event
        event::emit(StakeEvent {
            staker: tx_context::sender(ctx),
            iota_amount: stake_amount,
            stiota_amount: stiota_amount,
            exchange_rate: pool.exchange_rate,
            timestamp: clock::timestamp_ms(clock),
        });
    }

    // Initiate unstaking of stIOTA to receive IOTA after cooldown
    public entry fun unstake(
        pool: &mut StakingPool,
        stiota: StakedIOTA,
        clock: &Clock,
        ctx: &mut TxContext
    ) {
        assert!(!pool.is_paused, EPoolPaused);
        
        let StakedIOTA { id, amount: stiota_amount } = stiota;
        object::delete(id);
        
        assert!(stiota_amount > 0, EInvalidUnstakeAmount);
        
        // Calculate IOTA amount based on current exchange rate
        let iota_amount = calculate_iota_amount(stiota_amount, pool.exchange_rate);
        
        // Calculate unstaking fee
        let fee_amount = (iota_amount * UNSTAKE_FEE) / FEE_PRECISION;
        let net_iota_amount = iota_amount - fee_amount;
        
        // Update pool state
        pool.total_stiota_supply = pool.total_stiota_supply - stiota_amount;
        
        // Create unstake request with cooldown
        let unlock_time = clock::timestamp_ms(clock) + COOLDOWN_PERIOD_MS;
        let request = UnstakeRequest {
            id: object::new(ctx),
            owner: tx_context::sender(ctx),
            stiota_amount: stiota_amount,
            iota_amount: net_iota_amount,
            unlock_time: unlock_time,
            claimed: false,
        };
        
        transfer::share_object(request);
        
        // Transfer fee to protocol balance
        let fee_balance = balance::split(&mut pool.total_iota_staked, fee_amount);
        balance::join(&mut pool.protocol_fee_balance, fee_balance);
        
        // Emit unstake event
        event::emit(UnstakeEvent {
            unstaker: tx_context::sender(ctx),
            stiota_amount: stiota_amount,
            iota_amount: net_iota_amount,
            exchange_rate: pool.exchange_rate,
            unlock_time: unlock_time,
            timestamp: clock::timestamp_ms(clock),
        });
    }

    // Claim IOTA after cooldown period
    public entry fun claim_unstaked(
        pool: &mut StakingPool,
        request: &mut UnstakeRequest,
        clock: &Clock,
        ctx: &mut TxContext
    ) {
        assert!(!request.claimed, EInvalidUnstakeAmount);
        assert!(request.owner == tx_context::sender(ctx), EInvalidUnstakeAmount);
        assert!(clock::timestamp_ms(clock) >= request.unlock_time, ECooldownNotMet);
        
        request.claimed = true;
        
        // Transfer IOTA to user
        let iota_balance = balance::split(&mut pool.total_iota_staked, request.iota_amount);
        let iota_coin = coin::from_balance(iota_balance, ctx);
        transfer::public_transfer(iota_coin, request.owner);
        
        // Emit claim event
        event::emit(ClaimEvent {
            claimer: request.owner,
            iota_amount: request.iota_amount,
            timestamp: clock::timestamp_ms(clock),
        });
    }

    // Add rewards to the pool (increases exchange rate)
    public entry fun add_rewards(
        pool: &mut StakingPool,
        rewards: Coin<IOTA>,
        clock: &Clock,
        _ctx: &mut TxContext
    ) {
        let reward_amount = coin::value(&rewards);
        let rewards_balance = coin::into_balance(rewards);
        
        // Add rewards to accumulated rewards
        balance::join(&mut pool.accumulated_rewards, rewards_balance);
        
        // Update exchange rate if there are stakers
        if (pool.total_stiota_supply > 0) {
            let total_iota = balance::value(&pool.total_iota_staked) + balance::value(&pool.accumulated_rewards);
            pool.exchange_rate = (total_iota * 1_000_000_000) / pool.total_stiota_supply;
            
            // Move accumulated rewards to staked balance
            let accumulated = balance::withdraw_all(&mut pool.accumulated_rewards);
            balance::join(&mut pool.total_iota_staked, accumulated);
        };
        
        // Emit rewards added event
        event::emit(RewardsAddedEvent {
            amount: reward_amount,
            new_exchange_rate: pool.exchange_rate,
            timestamp: clock::timestamp_ms(clock),
        });
    }

    // Admin functions
    public entry fun pause_pool(
        pool: &mut StakingPool,
        ctx: &mut TxContext
    ) {
        assert!(pool.fee_recipient == tx_context::sender(ctx), EInvalidUnstakeAmount);
        pool.is_paused = true;
    }

    public entry fun unpause_pool(
        pool: &mut StakingPool,
        ctx: &mut TxContext
    ) {
        assert!(pool.fee_recipient == tx_context::sender(ctx), EInvalidUnstakeAmount);
        pool.is_paused = false;
    }

    public entry fun withdraw_protocol_fees(
        pool: &mut StakingPool,
        ctx: &mut TxContext
    ) {
        assert!(pool.fee_recipient == tx_context::sender(ctx), EInvalidUnstakeAmount);
        
        let fee_balance = balance::withdraw_all(&mut pool.protocol_fee_balance);
        let fee_coin = coin::from_balance(fee_balance, ctx);
        transfer::public_transfer(fee_coin, pool.fee_recipient);
    }

    // View functions
    public fun get_exchange_rate(pool: &StakingPool): u64 {
        pool.exchange_rate
    }

    public fun get_total_staked(pool: &StakingPool): u64 {
        balance::value(&pool.total_iota_staked)
    }

    public fun get_total_stiota_supply(pool: &StakingPool): u64 {
        pool.total_stiota_supply
    }

    public fun calculate_stiota_amount(iota_amount: u64, exchange_rate: u64): u64 {
        (iota_amount * 1_000_000_000) / exchange_rate
    }

    public fun calculate_iota_amount(stiota_amount: u64, exchange_rate: u64): u64 {
        (stiota_amount * exchange_rate) / 1_000_000_000
    }

    // Helper function to get stIOTA amount
    public fun get_stiota_amount(stiota: &StakedIOTA): u64 {
        stiota.amount
    }
}